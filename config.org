#+TITLE: Emacs Configuration
#+OPTIONS: toc:nil

* Offene Punkte

** Diminish doesn't work

Should be in after-init-hook?

** Setup Smartparens properly

* Before everything else ...

** Clean UI

Remove all those noobish frame decorations

#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode 0)
(setq inhibit-startup-screen t)
(global-hl-line-mode 1)
#+END_SRC

** Theme Setup I

#+BEGIN_SRC emacs-lisp
(defconst cla/the-theme-pkg
  'dracula-theme)
(defconst cla/the-theme
  'dracula)
#+END_SRC

... let's load up our theme if it exists. Otherwise
we would have to wait for package initialization to
complete while staring at a white window -.-

#+BEGIN_SRC emacs-lisp
(if (package-installed-p cla/the-theme-pkg)
  (load-theme cla/the-theme))
#+END_SRC

However if we don't have it installed yet, we try a
second time, after package initialization.

** Font Setup

#+BEGIN_SRC emacs-lisp
(defvar cla/font-family         "Source Code Pro")
(defvar cla/font-height-default 100)
(defvar cla/font-height-large   110)

(defun cla/set-default-font ()
  (interactive)
  (set-face-attribute 'default nil
                      :family cla/font-family :height cla/font-height-default))

(defun cla/set-large-font ()
  (interactive)
  (set-face-attribute 'default nil
                      :family cla/font-family :height cla/font-height-large))
(global-set-key (kbd "H-f 2") 'cla/set-large-font)

(cla/set-default-font)
#+END_SRC

* Setup package.el

#+BEGIN_SRC emacs-lisp
(package-initialize)
(add-to-list 'package-archives
  '("melpa" . "http://melpa.org/packages/") t)
(package-refresh-contents)

(defun cla/install-from-elpa (package)
  (unless (package-installed-p package)
    (package-install package)))
#+END_SRC

* General setup

** Theme Setup II

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p cla/the-theme-pkg)
  (package-install cla/the-theme-pkg)
  (load-theme cla/the-theme))
#+END_SRC

Highlights the line on which the point is

#+BEGIN_SRC emacs-lisp
(global-hl-line-mode 1)
#+END_SRC

** Sane Code Formatting

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil) ; never insert tabs
(setq-default tab-width 4)          ; always indent 4 spaces
(setq-default c-basic-offset 4)     ; c-mode indent 4 spaces
(add-hook 'before-save-hook         ; on save remove trailing whitespace
          'delete-trailing-whitespace)
(setq default-buffer-file-coding-system 'utf-8-unix)
#+END_SRC

** Visual Bell

#+BEGIN_SRC emacs-lisp
(setq visible-bell nil
      ring-bell-function 'flash-mode-line)
(defun flash-mode-line ()
  (invert-face 'mode-line)
  (run-with-timer 0.1 nil #'invert-face 'mode-line))
#+END_SRC

** Clean Directories

Disable emacs to auto-create files when editing

#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil) ; stop creating backup~ files
(setq auto-save-default nil) ; stop creating #autosave# files
#+END_SRC

** Keychords

#+BEGIN_SRC emacs-lisp
(windmove-default-keybindings 'meta)
(global-set-key (kbd "M-SPC") 'set-mark-command)
#+END_SRC

cla/switch-to-other-buffer is useful when editing two files
in one buffer, for example source/header file.

#+BEGIN_SRC emacs-lisp
(defun cla/switch-to-other-buffer ()
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer))))

(global-set-key (kbd "C-<tab>") 'cla/switch-to-other-buffer)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun cla/revert-buffer-no-confirm ()
  "Revert buffer without confirmation"
  (interactive)
  (revert-buffer t t))

;; Set window keys
(global-set-key (kbd "S-M-<up>") 'enlarge-window)
(global-set-key (kbd "S-M-<down>") 'shrink-window)
(global-set-key (kbd "S-M-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "S-M-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "H-<left>") 'previous-buffer)
(global-set-key (kbd "H-<right>") 'next-buffer)
(global-set-key (kbd "<triple-wheel-right>") 'previous-buffer)
(global-set-key (kbd "<triple-wheel-left>") 'next-buffer)
(global-set-key (kbd "H-<tab>") 'other-frame)

;; Hotkeys ftw
(global-set-key (kbd "<f5>") 'revert-buffer)
(global-set-key (kbd "C-<f5>") 'cla/revert-buffer-no-confirm)

(defun cla/back-to-indentation-or-beginning ()
  (interactive)
  (if (= (point) (progn (back-to-indentation) (point)))
      (beginning-of-line)))

(global-set-key (kbd "C-a") 'cla/back-to-indentation-or-beginning)
(global-set-key (kbd "<home>") 'cla/back-to-indentation-or-beginning)
#+END_SRC

* Packages

Let's ensure diminish is installed so we can use it later on.

#+BEGIN_SRC emacs-lisp
(cla/install-from-elpa 'diminish)
#+END_SRC

** Random Stuff

Stuff that doesn't need much setup

#+BEGIN_SRC emacs-lisp
(cla/install-from-elpa 'htmlize)
(cla/install-from-elpa 'markdown-mode)
(cla/install-from-elpa 'magit)
#+END_SRC

** Processing

#+BEGIN_SRC emacs-lisp
(setq processing-location
      "c:/Users/chris/processing-3.5.3/processing-java.exe")
(setq processing-application-dir
      "c:/Users/chris/processing-3.5.3")
(setq processing-sketchbook-dir
      "c:/Users/chris/Documents/Processing")
#+END_SRC

** Global Utilies

*** Diff HL Mode

#+BEGIN_SRC emacs-lisp
(cla/install-from-elpa 'diff-hl)
(add-hook 'after-init-hook 'global-diff-hl-mode)
#+END_SRC

*** Smart Parens

#+BEGIN_SRC emacs-lisp
(cla/install-from-elpa 'smartparens)
(add-hook 'after-init-hook 'smartparens-global-mode)
(add-hook 'after-init-hook 'show-smartparens-global-mode)
(diminish 'smartparens-mode)
;(sp-pair "'" nil :actions :rem)
(global-set-key (kbd "C-.") 'sp-select-next-thing)
#+END_SRC

*** Company Mode

#+BEGIN_SRC emacs-lisp
(cla/install-from-elpa 'company)
(setq company-dabbrev-downcase nil)
(setq company-minimum-prefix-length 2)
(setq company-idle-delay 0)
(add-hook 'after-init-hook 'global-company-mode)
(diminish 'company-mode)
#+END_SRC

*** Projectile

#+BEGIN_SRC emacs-lisp
(cla/install-from-elpa 'projectile)
(projectile-global-mode)
(global-set-key (kbd "C-c p f") 'projectile-find-file)
(global-set-key (kbd "C-c p g") 'projectile-grep)
(global-set-key (kbd "C-c p s") 'projectile-switch-project)
(global-set-key (kbd "C-c p k") 'projectile-kill-buffers)
#+END_SRC

*** Helm

#+BEGIN_SRC emacs-lisp
(cla/install-from-elpa 'helm)
(require 'helm-config)
(helm-mode 1)
#+END_SRC

We want our Helm Buffer to always open in the bottom
part of the window we're in.

This makes it rather predictable.

#+BEGIN_SRC emacs-lisp
(setq helm-split-window-in-side-p t)
(setq helm-split-window-default-side 'below)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(with-eval-after-load "helm-config"
  (global-set-key (kbd "C-x C-f") #'helm-find-files)
  (global-set-key (kbd "M-x") #'helm-M-x)
  (define-key helm-find-files-map "\t" 'helm-execute-persistent-action)
  (define-key helm-read-file-map "\t" 'helm-execute-persistent-action))
#+END_SRC

Finally we need Helm to interact with projectile

#+BEGIN_SRC emacs-lisp
(cla/install-from-elpa 'helm-projectile)
(require 'helm-projectile)
(helm-projectile-on)
#+END_SRC

*** Smart Mode Line

#+BEGIN_SRC emacs-lisp
(cla/install-from-elpa 'smart-mode-line)
(setq sml/theme 'respectful)
(sml/setup)
#+END_SRC

** Web Development

I think for Javascript/JSX based types I should replace this RJSX.

#+BEGIN_SRC emacs-lisp
(cla/install-from-elpa 'web-mode)
(cla/install-from-elpa 'rjsx-mode)

(dolist (suffix '("\\.js\\'" "\\.jsx\\'"))
  (add-to-list 'auto-mode-alist `(,suffix . rjsx-mode)))

(dolist (suffix '("\\.tsx\\'" "\\.ts\\'" "\\.json\\'" "\\.html\\'" "\\.css\\'" "\\.scss\\'"))
  (add-to-list 'auto-mode-alist `(,suffix . web-mode)))
#+END_SRC

TODO I should check RJSX for Typescript.
