#+TITLE: Emacs Configuration
#+OPTIONS: toc:nil

* Offene Punkte

** Diminish doesn't work

Should be in after-init-hook?

* Before everything else

** Clean UI

Initial Frame size is a bit small for modern screens

#+BEGIN_SRC emacs-lisp
  (setq default-frame-alist
    '((width . 120)
      (height . 50)))
#+END_SRC

Remove all those noobish frame decorations. First two are only
available when running on a graphical display.

#+BEGIN_SRC emacs-lisp
  (ignore-errors
    (tool-bar-mode -1)
    (scroll-bar-mode -1))
  (menu-bar-mode 0)
  (setq inhibit-startup-screen t)
  (global-hl-line-mode 1)
  (xterm-mouse-mode)
#+END_SRC

** Theme Setup I

#+BEGIN_SRC emacs-lisp
  (defconst cla/the-theme-pkg
    'dracula-theme)
  (defconst cla/the-theme
    'dracula)
#+END_SRC

... let's load up our theme if it exists. Otherwise
we would have to wait for package initialization to
complete while staring at a white window -.-

#+BEGIN_SRC emacs-lisp
  (ignore-errors
    (require 'package)
    (package-initialize)
    (load-theme cla/the-theme))
#+END_SRC

However if we don't have it installed yet, we try a
second time, after package initialization.

** Font Setup

#+BEGIN_SRC emacs-lisp
  (defvar cla/font-family         "SauceCodePro NF")
  (defvar cla/font-height-default 100)
  (defvar cla/font-height-large   110)

  (defun cla/set-default-font ()
    (interactive)
    (set-face-attribute 'default nil
                        :family cla/font-family :height cla/font-height-default))

  (defun cla/set-large-font ()
    (interactive)
    (set-face-attribute 'default nil
                        :family cla/font-family :height cla/font-height-large))

  (cla/set-large-font)
#+END_SRC

* Setup package.el + use-package

#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives
    '("melpa" . "http://melpa.org/packages/") t)
  (package-refresh-contents)

  (defun cla/install-from-elpa (package)
    (unless (package-installed-p package)
      (package-install package)))

  (defmacro use-package-from-elpa (pkg &rest body)
    `(progn
       (cla/install-from-elpa (quote ,pkg))
       (use-package ,pkg ,@body)))

  (cla/install-from-elpa 'use-package)
#+END_SRC

* General setup

** Theme Setup II

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p cla/the-theme-pkg)
    (package-install cla/the-theme-pkg)
    (load-theme cla/the-theme))
#+END_SRC

** Sane Code Formatting

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil) ; never insert tabs
  (setq-default tab-width 4)          ; always indent 4 spaces
  (setq-default c-basic-offset 4)     ; c-mode indent 4 spaces
  (add-hook 'before-save-hook         ; on save remove trailing whitespace
            'delete-trailing-whitespace)
  (set-language-environment "UTF-8")
  (setq-default buffer-file-coding-system 'utf-8-unix)
#+END_SRC

** Visual Bell

#+BEGIN_SRC emacs-lisp
  (setq visible-bell nil
        ring-bell-function 'flash-mode-line)
  (defun flash-mode-line ()
    (invert-face 'mode-line)
    (run-with-timer 0.1 nil #'invert-face 'mode-line))
#+END_SRC

** Clean Directories

Disable emacs to auto-create files when editing

#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil) ; stop creating backup~ files
  (setq auto-save-default nil) ; stop creating #autosave# files
#+END_SRC

** Keychords

windmove is bound to meta, so we can move between adjacent
windows using Alt+Arrow Keys, instead of C-x o. Note that this
collides with default org-mode keys, so first unbind those.

#+BEGIN_SRC emacs-lisp
  (define-key org-mode-map (kbd "<M-up>") nil)
  (define-key org-mode-map (kbd "<M-down>") nil)
  (define-key org-mode-map (kbd "<M-left>") nil)
  (define-key org-mode-map (kbd "<M-right>") nil)
#+END_SRC

tmux-windmove provides replacements for windmove-* functions.
When there is no window in the direction we're moving this will
use tmux select-pane to select the next pane in that direction.

#+BEGIN_SRC emacs-lisp
  (require 'tmux-windmove)
  (tmux/windmove-meta-binding)
#+END_SRC

In order to really work the corresponding part is found in dotfiles:
This contains tmux-configuration to redirect M-<arrow> events to
emacs, if the current pane is running in emacs.

The other key bindings resize the current window using
the arrow keys and Shift+Alt. Useful if you need to see more.

#+BEGIN_SRC
  (global-set-key (kbd "S-M-<up>") 'enlarge-window)
  (global-set-key (kbd "S-M-<down>") 'shrink-window)
  (global-set-key (kbd "S-M-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "S-M-<right>") 'enlarge-window-horizontally)
#+END_SRC

cla/switch-to-other-buffer is useful when editing two files
in one buffer, for example source/header file.

#+BEGIN_SRC emacs-lisp
  (defun cla/switch-to-other-buffer ()
    (interactive)
    (switch-to-buffer (other-buffer (current-buffer))))

  (global-set-key (kbd "M-]") 'cla/switch-to-other-buffer)
#+END_SRC

This makes home/C-a navigate back to indentation or if
already at indentation col 0, which is more in line with modern
editors.

#+BEGIN_SRC emacs-lisp
  (defun cla/back-to-indentation-or-beginning ()
    (interactive)
    (if (= (point) (progn (back-to-indentation) (point)))
        (beginning-of-line)))

  (global-set-key (kbd "C-a") 'cla/back-to-indentation-or-beginning)
  (global-set-key (kbd "<home>") 'cla/back-to-indentation-or-beginning)
#+END_SRC

*** Error Navigation

next-error/previous-error allow navigating matches e.g. generated from
grepping. These bindings are comfortably reached with the right hand
when using an ansi layout:

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-[") 'previous-error)
(global-set-key (kbd "M-]") 'next-error)
#+END_SRC

** Search

#+BEGIN_SRC emacs-list

  (rg-define-search rg-query-project-dir
    "Search for thing at point in files matching the current file
  under the current directory."
    :query ask
    :format literal
    :files current
    :dir project)

  (global-set-key (kbd "C-S-<f3>") 'rg-query-project-dir)
  (global-set-key (kbd "C-<f3>") 'rg-dwim-project-dir)
#+END_SRC

** Dired

This enables the 'a' key in dired, which can be used to open the
file or directory at point in the same buffer.

#+BEGIN_SRC emacs-lisp
(put 'dired-find-alternate-file 'disabled nil)
#+END_SRC

* Packages

Let's ensure diminish is installed so we can use it later on.

#+BEGIN_SRC emacs-lisp
  (cla/install-from-elpa 'diminish)
#+END_SRC

** Random Stuff

Stuff that doesn't need much setup

#+BEGIN_SRC emacs-lisp
  (cla/install-from-elpa 'rg)
  (cla/install-from-elpa 'htmlize)
  (cla/install-from-elpa 'markdown-mode)
  (cla/install-from-elpa 'magit)
#+END_SRC

** Processing

#+BEGIN_SRC emacs-lisp
  (setq processing-location
        "c:/Users/chris/processing-3.5.3/processing-java.exe")
  (setq processing-application-dir
        "c:/Users/chris/processing-3.5.3")
  (setq processing-sketchbook-dir
        "c:/Users/chris/Documents/Processing")
#+END_SRC

** Global Utilies

*** Diff HL Mode

Highlight modified lines of code in files under version control

#+BEGIN_SRC emacs-lisp
  (cla/install-from-elpa 'diff-hl)
  (add-hook 'after-init-hook 'global-diff-hl-mode)
#+END_SRC

*** Smart Parens

#+BEGIN_SRC emacs-lisp
  (cla/install-from-elpa 'smartparens)
  (with-eval-after-load 'smartparens
    (diminish 'smartparens-mode))
  (require 'smartparens-config)
  (smartparens-global-mode)
  (show-smartparens-global-mode)
  ;(sp-pair "'" nil :actions :rem)
  (global-set-key (kbd "C-.") 'sp-select-next-thing)
#+END_SRC

*** Company Mode

Basic Company Setup

#+BEGIN_SRC emacs-lisp
  (cla/install-from-elpa 'company)
  (setq company-dabbrev-downcase nil)
  (setq company-minimum-prefix-length 2)
  (setq company-idle-delay 0)
  (add-hook 'after-init-hook 'global-company-mode)
  (with-eval-after-load 'company
    (diminish 'company-mode))
#+END_SRC

Company Box is a company frontend that supports icons

#+BEGIN_SRC emacs-lisp
  (use-package-from-elpa company-box
                         :config
                         (diminish 'company-box-mode)
                         :hook
                         (company-mode . company-box-mode))
#+END_SRC

*** LSP Mode

Used for:
- Rust

#+BEGIN_SRC emacs-lisp
;(cla/install-from-elpa 'lsp-mode)
#+END_SRC

*** Projectile

#+BEGIN_SRC emacs-lisp
  (cla/install-from-elpa 'projectile)
  (projectile-global-mode)
  (setq projectile-mode-line-prefix " ")
  (global-set-key (kbd "C-c p f") 'projectile-find-file)
  (global-set-key (kbd "C-c p g") 'projectile-grep)
  (global-set-key (kbd "C-c p s") 'projectile-switch-project)
  (global-set-key (kbd "C-c p k") 'projectile-kill-buffers)
#+END_SRC

Let's enable native indexing/no caching, if the system has git and fd
this should be sufficiently efficient:

#+BEGIN_SRC emacs-lisp
  (setq projectile-indexing-method 'alien)
  (setq projectile-enable-caching nil)
#+END_SRC

*** Helm

#+BEGIN_SRC emacs-lisp
  (cla/install-from-elpa 'helm)
  (require 'helm-config)
  (helm-mode 1)
#+END_SRC

We want our Helm Buffer to always open in the bottom part of the
window we're in. This makes it rather predictable.

#+BEGIN_SRC emacs-lisp
  (setq helm-split-window-in-side-p t)
  (setq helm-split-window-default-side 'below)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load "helm-config"
    (global-set-key (kbd "C-x C-f") #'helm-find-files)
    (global-set-key (kbd "M-x") #'helm-M-x)
    (define-key helm-find-files-map "\t" 'helm-execute-persistent-action)
    (define-key helm-read-file-map "\t" 'helm-execute-persistent-action)
    (diminish 'helm-mode))
#+END_SRC

Finally we need Helm to interact with projectile

#+BEGIN_SRC emacs-lisp
  (use-package-from-elpa helm-projectile
                         :config
                         (helm-projectile-on))
#+END_SRC

*** Smart Mode Line

#+BEGIN_SRC emacs-lisp
  (cla/install-from-elpa 'smart-mode-line)
  (setq sml/theme 'dark)
  (sml/setup)
#+END_SRC

*** COMMENT Flycheck

#+BEGIN_SRC emacs-lisp
  ;; (cla/install-from-elpa 'flycheck)
  ;; (use-package flycheck
  ;;   :ensure t
  ;;   :init (global-flycheck-mode))
  ;; (setq flycheck-check-syntax-automatically '(mode-enabled save))
  ;; (setq-default flycheck-disabled-checkers '(c/c++-gcc c/c++-clang javascript-jshint))
  ;; (add-hook 'after-init-hook #'global-flycheck-mode)
  ;; (flycheck-add-mode 'javascript-eslint 'rjsx-mode)
#+END_SRC

* Web Development

Some minor major-modes (lol) for common formats

#+BEGIN_SRC emacs-lisp
  (cla/install-from-elpa 'yaml-mode)
  (cla/install-from-elpa 'mustache-mode)
  (require 'mustache-mode)
#+END_SRC

I think for Javascript/JSX based types I should replace this RJSX.

#+BEGIN_SRC emacs-lisp
  (cla/install-from-elpa 'web-mode)
  (cla/install-from-elpa 'rjsx-mode)

  (dolist (suffix '("\\.js\\'" "\\.jsx\\'"))
    (add-to-list 'auto-mode-alist `(,suffix . rjsx-mode)))

  (dolist (suffix '("\\.tsx\\'" "\\.ts\\'" "\\.json\\'" "\\.html\\'" "\\.css\\'"))
    (add-to-list 'auto-mode-alist `(,suffix . web-mode)))

  (dolist (suffix '("\\.scss\\'"))
    (add-to-list 'auto-mode-alist `(,suffix . scss-mode)))
#+END_SRC

Customize indentation

#+BEGIN_SRC emacs-lisp
  (setq sgml-basic-offset 4)
#+END_SRC

TODO I should check RJSX for Typescript.

* Slime

#+BEGIN_SRC emacs-lisp
; (cla/install-from-elpa 'slime)
; (cla/install-from-elpa 'slime-company)
; (setq slime-contribs '(slime-fancy slime-company))
; (setq inferior-lisp-program "/data/data/com.termux/files/home/ecl/bin/ecl")
#+END_SRC

* Rust

#+BEGIN_SRC emacs-lisp
;(cla/install-from-elpa 'rust-mode)
;(add-hook rust-mode-hook #'lsp)
#+END_SRC
